#!/bin/sh

# Set some configs prior to loading
autoupdate="$(grep 'autoupdate' "$HOME/.bsm/.cfg" | cut -d= -f2)"

# BSM's main code

# Autoupdate
if [ -n "$autoupdate" ]; then
  if [ -e "$HOME/repos/bsm" ]; then
		export repo="$HOME/repos/bsm"
	else
		export repo="$(find "$HOME" -type d -name bsm 2>/dev/null)"
	fi

  # Check for updates
  if [ -n "$(diff "$repo/.bsm/.lib" "$HOME/.bsm/.lib")" ] \
  || [ -n "$(diff "$repo/.bsm/version" "$HOME/.bsm/version")" ] \
  || [ -n "$(diff "$repo/.bsm/motd.txt" "$HOME/.bsm/motd.txt")" ] \
  || [ -n "$(diff "$repo/.bsm/help" "$HOME/.bsm/help")" ] \
  || [ -n "$(diff "$repo/bsm" "$HOME/bin/bsm")" ] \
  || [ -n "$(diff "$repo/.bsm/bsm-comp" "$HOME/.bash_completion.d/bsm-comp")" ] \
  || [ -n "$(diff "$repo/.bsm/assets" "$HOME/.bsm/assets")" ]; then
    . "$repo/install"
  fi

  # Ensure files have time to write
  sleep 1
fi

# Check for unit test
if [ -n "$BSM_TST" ]; then
  # Load the lib from the repo and set prgroot to repo
  printf "[BSM] UNIT TEST MODE! READING FROM REPO!\n"
  printf "Repo: $repo\n"
  . "$repo/.bsm/.lib"
  export prgroot="$repo/.bsm"
else
  . "$HOME/.bsm/.lib"
fi

# Run like normal (should select based on prod or test)
__bsm() {
  # Go interactive if no arguments or commands are passed
  if [ -z "$1" ]; then
    __args --interactive
  else
    __args "$@"
  fi
}

__bsm "$@"

# Cleanup for accidental sourcing
[ "$$" -eq "$PPID" ] && { unset __bsm __args __sh cmds __create __open __remove __rename __config __list __cwd __cws __shopt prgroot scriptroot editor autoupdate defaulttype repo lists write error verbose itemlist cfg_type in_shell; }

exit 0
