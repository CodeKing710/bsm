#!/usr/bin/env bash

# Check for parent shell so we don't set any options inadvertently
[[ ! "$$" -eq "$BASHPID" ]] && {
  shopt -q -s extglob
  set -o emacs
}

# Set some configs prior to loading
autoupdate="$(cat "$HOME"/.bsm/.cfg | grep 'autoupdate' | cut -d '=' -f2)"
repo="$(find "$HOME" -type d -name bsm 2>/dev/null | head -1)"
# [[ ! -e "$HOME/.bsm" ]] && "$repo/install"

# BSM's main code

# Check for unit test
if [[ -n "$BSM_TST" ]]; then
  # Load the lib from the repo and set prgroot to repo
  echo -e "[BSM] UNIT TEST MODE! READING FROM REPO!"
  source "$repo/.bsm/.lib"
  prgroot="$repo/.bsm"
elif [[ "$autoupdate" == "true" ]]; then
  # Check for updates
  if [[ -n "$(diff "$repo"/.bsm/.lib "$HOME"/.bsm/.lib)" \
  || -n "$(diff "$repo"/.bsm/version "$HOME"/.bsm/version)" \
  || -n "$(diff "$repo"/.bsm/motd.txt "$HOME"/.bsm/motd.txt)" \
  || -n "$(diff "$repo"/.bsm/help "$HOME"/.bsm/help)" \
  || -n "$(diff "$repo"/bsm "$HOME"/bin/bsm)" \
  || -n "$(diff "$repo"/.bsm/bsm-comp "$HOME"/.d/bsm-comp)" ]]; then "$repo/install"; fi

  # Load lib
  source "$HOME/.bsm/.lib"
else
  source "$HOME/.bsm/.lib"
fi

# Run like normal (should select based on prod or test)
__bsm() {
  # Go interactive if no arguments or commands are passed
  if [ -z "$1" ]; then
    __args --interactive
  else
    if [[ "$1" =~ "-" ]]; then
      # Arg mode
      __args "$@"
    else
      # Command mode
      __cmds "$@"
    fi
  fi
}

__bsm "$@"

# Cleanup for accidental sourcing
[[ "$$" -eq "$BASHPID" ]] && { unset __bsm __args __sh __cmds __create __open __remove __rename __config __list __cwd __cws prgroot scriptroot editor autoupdate defaulttype repo lists write error verbose; }

exit 0
