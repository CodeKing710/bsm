#!/bin/bash

# BSM's Functions and Variables

# Vars
__cwd="$(pwd)"
__cws=""
prgroot="$HOME/.bsm"
scriptroot="$HOME/scripts"
declare -A lists
lists[cmds]="^(create|open|rename|remove|config|sh|shell|list|version|help|update|reset|uninstall|getdeps)$"
lists[cfg_type]="^(bash|python|node|ruby|lisp|perl)$"

# Output functions
error() { printf "\e[31m[ERROR]\e[0m ${1}\n" >&2; }
verbose() { [[ -n "$VERBOSE" ]] && printf "\e[32m[VERBOSE]\e[0m ${1}\n"; }
write() { printf "\e[36m[BSM]\e[0m ${1}\n"; }

# Funcs
__loadcfg() {
  local cfg="$prgroot/.cfg"
  editor="$(cat "$cfg" | grep 'editor' | cut -d '=' -f2)"
  defaulttype="$(cat "$cfg" | grep 'defaulttype' | cut -d '=' -f2)"
}
# Config vars will be set via function in-case of needing reloaded
__loadcfg

__args() {
  # Process args
  # Exit means arg list is not passed
  # Return means arg list recursively passed
  while [[ -n "$1" ]]; do
    case "$1" in
      -c | --create )
        shift
        [[ -z "$1" ]] && error "Missing required value: 'NAME'" && exit
        __create "$@"
        return;;
      -o | --open )
        shift
        # [[ "$1" =~ '-' || -z "$1" ]] && echo "Missing required value: 'NAME'" && exit
        __open "$1" # Can only open one file at a time so any more wouldn't make sense
        exit;;
      -r | --remove )
        shift
        [[ "$1" =~ ^- || -z "$1" ]] && error "Missing required value: 'NAME'" && exit
        __remove "$@"
        return;;
      -n | --rename )
        shift
        [[ "$1" =~ ^- || -z "$1" ]] && error "Missing required value: 'WORKING_SCRIPT'" && exit
        [[ "$2" =~ ^- || -z "$2" ]] && error "Missing required value: 'NEW_NAME'" && exit
        __rename "$@"
        return;;
      -C | --config )
        shift
        [[ "$1" =~ ^- || -z "$1" ]] && error "Missing required value: 'RULE'" && exit
        __config "$@"
        return;;
      -*l* | --list )
        shift; __list "$@"
        return;;
      --interactive )
        __sh
        exit;;
      -*V* | --verbose )
        VERBOSE=true
        ;;
      -\? | -h | --help )
        cat "$prgroot/help"
        return;; # Because cmd mode references these options
      -v | --version )
        cat "$prgroot/version"
        return;; # Because cmd mode references these options
      --update )
        __update
        exit;;
      --reset-cfg )
        verbose "Resetting BSM to default configuration..."
        cp -f "$repo/.bsm/.cfg" "$HOME/.bsm/.cfg" && write "BSM has been reset!" || error "Failed to reset defaults!"
        exit;;
      --reset-shcfg )
        verbose "Resetting BSM Shell to default configuration..."
        cp -f "$repo/.bsm/sh.cfg" "$HOME/.bsm/sh.cfg" && write "BSM Shell has been reset!" || error "Failed to reset defaults!"
        exit;;
      --uninstall )
        __uninstall
        exit;;
      --dependencies )
        __getdeps
        exit;;
      * )
        # Catch-all
        if [[ ! "$1" =~ '-' ]]; then
          __cmds "$@"
        else
          cat "$prgroot/help" | head -1
          error "\"$1\" is not an argument!"
          exit
        fi
        return;;
    esac
  shift; done
}

__cmds() {
  # Same as args but easier to read
  while [[ -n "$1" ]]; do
    case "${1,,}" in
      create )
        shift
        [[ -z "$1" ]] && { error "Missing required value: 'NAME'"; return; }
        __create "$@"
        return;;
      open )
        shift
        __open "$1"
        return;;
      rename )
        shift
        [[ "$1" =~ ^- || "$1" =~ ${lists[cmds]} || -z "$1" ]] && { error "Missing required value: 'OLD_NAME'"; return; }
        [[ "$2" =~ ^- || "$2" =~ ${lists[cmds]} || -z "$2" ]] && { error "Missing required value: 'OLD_NAME'"; return; }
        __rename "$@"
        return;;
      rm | remove )
        shift
        [[ "$1" =~ ^- || "$1" =~ ${lists[cmds]} || -z "$1" ]] && { error "Missing required value: 'NAME'"; return; }
        __remove "$@"
        return;;
      cfg | config )
        shift
        [[ "$1" =~ ^- || "$1" =~ ${lists[cmds]/list/} || -z "$1" ]] && { error "Missing required value: 'RULE'"; return; }
        __config "$@"
        return;;
      sh | shell )
        __sh
        ;;
      shopt )
        [[ -n "$1" ]] && shift
        __shopt "$@"
        return;;
      list )
        [[ -n "$1" ]] && shift
        __list "$@"
        return;;
      version )
        __args -v
        ;;
      help )
        __args -h
        ;;
      update )
        __update
        ;;
      reset )
        shift
        [[ -z "$1" ]] && { error "Missing required value: 'RESET_TYPE'"; return; }
        [[ "$1" == "cfg" ]] && { __args --reset-cfg; return; }
        [[ "$1" =~ "sh" ]] && { __args --reset-shcfg; return; }
        return;;
      uninstall )
        __uninstall
        exit;;
      getdeps )
        __getdeps
        ;;
      * )
        if [[ "$1" =~ '-' ]]; then
          __args "$@"
        else
          cat "$prgroot/help" | head -1
          error "\"$1\" is not an command!"
        fi
        return;;
    esac
  shift; done
}

__sh() {
  # Load BSM Shell options
  local motd="$(cat "$prgroot/motd.txt")"
  local hush_motd="$(cat "$prgroot/sh.cfg" | grep "hush_login" | cut -d= -f2)"
  # Welcome message
  [[ "$hush_motd" == "false" ]] && printf "$motd\n\n"
  # Purposeful infinite loop
  while [[ true ]]; do
    printf "\e[1;36mbsm\e[0m>"
    read -rep ' ' stdin
    if [[ "${stdin,}" == "exit" || "${stdin,}" == "quit" ]]; then
      break
    elif [[ "${stdin,}" == "pass" ]]; then
      continue
    elif [[ "${stdin,}" =~ "pass" ]]; then
      bash -c "$(echo "${stdin,}" | cut -d ' ' -f2-)"
    else
      __cmds ${stdin,}
    fi
  done
}

__shopt() {
  [[ -z "$1" ]] && { cat "$prgroot/sh.cfg"; return; }
  # Inner write function
  rwrite() {
    verbose "Setting rule from $oldvalue to $newvalue"
    sed -i -e "s/$rule=$oldvalue/$rule=$newvalue/" $cfg
    write "Updated rule $rule from $oldvalue to $newvalue!"
  }
  local cfg="$prgroot/sh.cfg"
  until [[ "$1" =~ '-' || "$1" == "" || "$1" =~ ${lists[cmds]} ]]; do
    [[ "$1" =~ '=' ]] && {
      local rule="${1%%=*}"
      local oldvalue="$(cat "$cfg" | grep "$rule" | cut -d= -f2)"
      local newvalue="${1##*=}"
      # Check by type
      case "$rule" in
        # Booleans
        hush_login )
          [[ ! "${newvalue,,}" =~ ^(true|false)$ ]] && {
            error "Value must be a boolean (true/false)!"; return
          } || rwrite
          ;;
        # Unhandled get written as text
        * )
          rwrite
          ;;
      esac
    } || {
      [[ "$1" == "RESET" ]] && __args --reset-shcfg || {
        local rule="$1"
        echo "$(cat "$cfg" | grep "$rule")"
      }
    }
  shift; done; [[ -n "$@" ]] && __args "$@"
}

__create() {
  # Check that the scripts folder was made
  [[ ! -e "$scriptroot" ]] && mkdir "$scriptroot"

  # Check if venv location is supplied
  local envshebang="#!/bin/env "
  local env=""
  local envpath=""

  # Inner type select func
  proctype() {
    local name="$1"
    # Node
    if [[ "$name" =~ ".js" ]]; then
      if [[ -n "$env" ]]; then
        # [[ ! `command -v vem` ]] && echo -e "Must install Virtual Environment Manager to take advantage of Node Virtual Environments!\nRun \`git clone https://github.com/CodeKing710/vem; vem/install;\` to download and install VEM!" && exit
        # VEM is optional to be able to manage your envs
        # To allow reference, use the path to THE PARENT FOLDER of the node_modules folder that has the desired packages
        # If VEM is installed, it will list your envs and check if the name exists then use that path
        # Paths detected by the '/' that exists in each path
        if [[ -n "$(command -v vem)" ]]; then
          local vemenv="$(vem js --path "$envpath" 2>/dev/null)"
          [[ -z "$vemenv" ]] && error "No VEM env with name $envpath!" && exit
          envpath="$vemenv"
        else
          # Assume path, bail upon no path
          [[ ! "$envpath" =~ '/' ]] && error "VEM must be installed to use names!\nIf this is a path, please prepend it with './' or use the absolute path!" && exit
        fi
        if [[ ! -e "$envpath" ]]; then
          error "Environment path doesn't exist!"
          error "$envpath"
          exit
        else
          # envshebang="#!$envpath/"
          envpath="$envpath/node_modules/"
          [[ $TERM_PROGRAM == 'mintty' ]] && envpath=$(cygpath -w "$envpath" | sed -e 's;\\;/;g;' | sed -e 's;/;//;g;' | sed -e 's;//;\\\\\\\\;g;') || envpath="$envpath"
          mkfile "${envshebang}node\n\n" "${name%.***}" "//" "const venv = '$envpath'\nconst getpkg = (loc) => {\n\t/**\n\t\tWith this being a venv,\n\t\tevery reference to a package that isn't directly in the project\n\t\tmust go through this wrapper\n\t\tto ensure node is looking in the right place.\n\n\t\tIf you are getting a package relative to your project,\n\t\tUSE REQUIRE!! Or use ESM import syntax\n\t**/\n\trequire(\`\${venv}\${loc}\`);\n}\n"
        fi
      else
        mkfile "${envshebang}node\n\n" "${name%.***}" "//"
      fi
    # Python
    elif [[ "$name" =~ ".py" ]]; then
      if [[ -n "$env" ]]; then
        if [[ -n "$(command -v vem)" ]]; then
          local vemenv="$(vem py --path "$envpath" 2>/dev/null)"
          [[ -e "$vemenv/bin" ]] && vemenv="$vemenv/bin" || vemenv="$vemenv/Scripts"
          [[ -z "$vemenv" ]] && error "No VEM env with name $envpath!" && exit
          envpath="$vemenv"
        else
          # Assume path, bail upon no path
          [[ ! "$envpath" =~ '/' ]] && error "VEM must be installed to use names!\nIf this is a path, please prepend it with './' or use the absolute path!" && exit
        fi
        if [[ ! -e "$envpath" ]]; then
          error "Environment path doesn't exist!"
          error "$envpath"
          exit
        else
          envshebang="#!$envpath/"
          mkfile "${envshebang}python\n\n" "${name%.***}" "#"
        fi
      else
        mkfile "${envshebang}python\n\n" "${name%.***}" "#"
      fi
    # Ruby
    elif [[ "$name" =~ ".rb" ]]; then
      mkfile "${envshebang}ruby\n\n" "${name%.***}" "#"
    # LISP
    elif [[ "$name" =~ ".cl" ]]; then
      mkfile "${envshebang}-S sbcl --script\n\n" "${name%.***}" ";"
    # PowerShell
    elif [[ "$name" =~ ".ps1" ]]; then
      mkfile "${envshebang}powershell\n\n" "${name%.***}" "#"
    # Perl
    elif [[ "$name" =~ ".pl" ]]; then
      mkfile "${envshebang}perl\n\n" "${name%.***}" "#"
    # Bash
    elif [[ "$name" =~ ".sh" ]]; then
      mkfile "${envshebang}bash\n\n" "${name%.***}" "#"
    # Default script type
    else
      mkfile "${envshebang}$(echo "$defaulttype" | sed -e 's;lisp;-S sbcl --script;gi;')\n\n" "${name%.***}" "#"
    fi
  }
  # Inner file generator func
  mkfile() {
    # $1 is the shebang line, $2 is the file itself
    verbose "Writing data to script file..."
    verbose "Extra content: $4"

    local scriptloc="${scriptroot}/${2}"
    printf "${1}${3} Script - ${2}\n${3} Purpose: XYZ\n\n`[ -n "$4" ] && echo ${4}`" > "${scriptloc}" && write "Successfully created script '${2}'!\n" || error "Failed to create script ${2} at ${scriptloc}!"

    # Set the current working script (__cws) to the newly created script
    __cws="$2"
  }

  # Finishing the loop will hand back the arg list
  # This behavior is only necessity for args that accept
  # unlimited values that are then followed by more args
  until [[ "$1" =~ ^- || -z "$1" || "$1" =~ ${lists[cmds]} ]]; do
    [[ "$1" =~ ^(-e|--env|env)$ ]] && env=true && shift && envpath="$1" && shift
    local name="$1"
    
    verbose "Script name: ${name%.***}"

    # Check for conflict of name
    if [ -e "$scriptroot/${name%.***}" ]; then
      printf "\e[1;31m[WARNING]\e[0m The script ${name%.***} already exists! Did you want to overwrite? [Y\\\\n] "
      read yn
      [[ "${yn,,}" =~ "y" ]] && proctype "$name" || echo "Keeping original script '${name%.***}'"
    else
      proctype "$name"
    fi
    env=""
    envpath=""
  shift; done; [[ -n "$@" ]] && __args "$@"
}

__open() {
  if [[ -n "$1" ]]; then # Arg passed
    __cws="$1" # Set
  elif [[ -z "$__cws" && -n "$1" ]]; then
    __cws="$1"
  fi

  [[ -n "$__cws" ]] && $editor "$scriptroot/$__cws" || error "No file to open!"
}

__remove() {
  # Loop until an arg is seen
  until [[ "$1" =~ ^- || "$1" == "" || "$1" =~ ${lists[cmds]} ]]; do
    local name="$1"
    rm "$scriptroot/$name" 2>/dev/null && write "Successfully removed script '$name'" || error "Unable to remove script '$name'"
  shift; done; [[ -n "$@" ]] && __args "$@"
}

__list() {
  local list=`ls -p1 "$scriptroot" 2>/dev/null | xargs -i echo "{}"`
  if [[ ! -e "$scriptroot" || "$list" == "" ]]; then
    write "No Scripts Created Yet!"
  else
    [[ "$1" =~ ^(-1|rows)$ ]] && printf "$list" || printf "$list" | column
  fi
}

# Accepted arg style: oldname>newname
__rename() {
  # Loop until arg or cmd is seen
  until [[ "$1" =~ ^- || "$1" == "" || "$1" =~ ${lists[cmds]} ]]; do
    local old="$1"
    local new="$2"
    shift # Ensure next arg in loop is not the new name
    if [ -n "$old" -a -n "$new" ]; then
      mv "$scriptroot/$old" "$scriptroot/$new" 2>/dev/null && write "Successfully renamed '$old' to '$new'!"
      __cws="$new"
    else
      error "Format incorrect! Format: OLD_NAME NEW_NAME"
    fi
  shift; done; [[ -n "$@" ]] && __args "$@"
}

# Variable arg style: rule rule=value
__config() {
  # Inner write function
  rwrite() {
    verbose "Setting rule from $oldvalue to $newvalue"
    sed -i -e "s/$rule=$oldvalue/$rule=$newvalue/" $cfg
    write "Updated rule $rule from $oldvalue to $newvalue!"
  }
  local cfg="$prgroot/.cfg"
  until [[ "$1" =~ ^- || "$1" == "" || "$1" =~ ${lists[cmds]/\|list/} ]]; do
    if [[ "$1" =~ '=' ]]; then
      local rule="${1%%=*}"
      local oldvalue="$(cat "$cfg" | grep "$rule" | cut -d= -f2)"
      local newvalue="${1##*=}"
      # Check value lists for specific settings
      case "$rule" in
        autoupdate )
          # Bool rules
          if [[ ! "${newvalue,,}" =~ ^(true|false)$ ]]; then
            error "Value must be a boolean!"
            exit
          else
            rwrite
          fi
          ;;
        defaulttype )
          # Type rules
          if [[ ! "${newvalue,,}" =~ ${lists[cfg_type]} ]]; then
            error "Value must be Bash, Python, Ruby, LISP, Perl, or Node!"
            exit
          else
            rwrite
          fi
          ;;
        * )
          # Any other rules
          rwrite
          ;;
      esac
    elif [[ "$1" == 'list' ]]; then
      echo "Current Settings:"
      cat "$cfg"
      return
    elif [[ "$1" == 'RESET' ]]; then
      __args --reset-cfg
    fi
    write "Rule: `cat "$cfg" | grep "\b$1\b" || error "No Rule Found!"`"
  shift; done; [[ -n "$@" ]] && __args "$@"
}

__uninstall() {
  read -p "Are you sure you want to uninstall BSM? [Y\n] " yn
  if [[ "${yn,,}" =~ 'y' ]]; then
    write "Uninstalling BSM..."
    rm "$HOME/bin/bsm"
    rm -r "$HOME/.bsm"

    read -p "Did you want to remove the repo as well? [Y\n] " yn
    if [[ "${yn,,}" =~ 'y' ]]; then
      write "Removing repo..."
      rm -r "$repo"
    else
      write "Keeping the repo"
    fi
    write "Successfully removed BSM!"
  fi
}

# Testing phase
__getdeps() {
  [ "$TERM_PROGRAM" = "mintty" ] && error "You must manually install the dependencies for Git Bash!" && return
  
  write "Retrieving BSM dependencies..."
  sudo apt-get install nodejs
  sudo apt-get install python
  sudo apt-get install ruby
  sudo apt-get install sbcl
}

__update() {
  verbose "Checking for updates..."
  if [[ `diff "$repo"/.bsm/.lib "$HOME"/.bsm/.lib` || `diff "$repo"/.bsm/version "$HOME"/.bsm/version` || `diff "$repo"/.bsm/help "$HOME"/.bsm/help` ]]; then 
    verbose "Updating BSM..."
    "$repo/install" && write "Successfully installed BSM!"
  else
    write "BSM up-to-date!"
  fi
}
