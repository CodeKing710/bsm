#!/bin/sh

# BSM's Functions and Variables

# Vars
__cwd="$(pwd)"
__cws=""
prgroot="$HOME/.bsm"
scriptroot="$HOME/scripts"
cmds="^(create|open|rename|remove|config|sh|shell|list|version|help|update|reset|uninstall|getdeps)$"
cfg_type="^(bash|python|node|ruby|lisp|perl|daemon|swift)$"
itemlist=""
in_shell=0

# Output functions
error() { printf "\e[31m[ERROR]\e[0m ${1}\n" >&2; }
verbose() { [ -n "$VERBOSE" ] && printf "\e[32m[VERBOSE]\e[0m ${1}\n"; }
log() { printf "\e[36m[BSM]\e[0m ${1}\n"; }
setarg() {
  if echo "$1" | grep -q '^-' || ! echo "$1" | grep -qE "$cmds"; then
    arg="$1"
  else
    arg="$(printf "$1" | tr '[:upper:]' '[:lower:]')"
  fi
}

# Funcs
__loadcfg() {
  cfg="$prgroot/.cfg"
  editor="$(grep 'editor' "$cfg" | cut -d '=' -f2)"
  defaulttype="$(grep 'defaulttype' "$cfg" | cut -d '=' -f2)"
}
# Config vars will be set via function in-case of needing reloaded
__loadcfg

__args() {
  # Process args
  # Exit means arg list is not passed
  # Return means arg list recursively passed
  while [ -n "$1" ]; do
    setarg "$1"

    case "$arg" in
      -c | --create | create )
        shift
        setarg "$1"
        if [ -z "$arg" ]; then
          error "Missing required value: 'NAME'"
          [ "$in_shell" -eq 1 ] && return || exit 1
        else
          # Capture a list until a command or argument is found
          itemlist="$arg"
          shift
          until echo "$1" | grep -q '^-' || echo "$1" | grep -q -E "$cmds" || [ -z "$1" ]; do
            itemlist="$itemlist $1"
          shift; done
          verbose "Current list: $itemlist"
        fi
        __create "$itemlist"
        if echo "$1" | grep -q -E '^(-o|--open|open)$'; then
          __open "$__cws"
        fi
        [ "$in_shell" -eq 1 ] && return || exit 0
        ;;
      -o | --open | open )
        shift
        setarg "$1"
        if [ -z "$1" ]; then
          error "Missing required value: 'NAME'"
          [ "$in_shell" -eq 1 ] && return || exit 1
        else
          # Capture a list until a command or argument is found
          itemlist="$arg"
          shift
          until echo "$1" | grep -q '^-' || echo "$1" | grep -q -E "$cmds" || [ -z "$1" ]; do
            itemlist="$itemlist $1"
          shift; done
          verbose "Current list: $itemlist"
        fi
        __open "$itemlist" # Rework to use captured list
        [ "$in_shell" -eq 1 ] && return || exit 0
        ;;
      -r | --remove | remove | rm )
        shift
        setarg "$1"
        if echo "$arg" | grep -q '^-' || [ -z "$arg" ]; then
          error "Missing required value: 'NAME'"
          [ "$in_shell" -eq 1 ] && return || exit 1
        else
          itemlist="$arg"
          shift
          until echo "$1" | grep -q '^-' || echo "$1" | grep -q -E "$cmds" || [ -z "$1" ]; do
            itemlist="$itemlist $1"
          shift; done
        fi
        __remove "$itemlist"
        [ "$in_shell" -eq 1 ] && return || exit 0
        ;;
      -n | --rename | rename )
        shift
        setarg "$1"
        if echo "$arg" | grep -q '^-' || [ -z "$arg" ]; then
          error "Missing required value: 'WORKING_SCRIPT'"
          [ "$in_shell" -eq 1 ] && return || exit 1
        fi
        prev="$arg"
        shift
        setarg "$1"
        if echo "$arg" | grep -q '^-' || [ -z "$arg" ]; then
          error "Missing required value: 'NEW_NAME'"
          [ "$in_shell" -eq 1 ] && return || exit 1
        fi
        verbose "Old Name: $prev; New Name: $arg"
        __rename "$prev" "$arg"
        [ "$in_shell" -eq 1 ] && return || exit 0
        ;;
      -C | --config | config | cfg )
        shift
        setarg "$1"
        if echo "$arg" | grep -q '^-' || [ -z "$arg" ]; then
          error "Missing required value: 'RULE'"
          [ "$in_shell" -eq 1 ] && return || exit 1
        fi
        __config "$arg"
        [ "$in_shell" -eq 1 ] && return || exit 0
        ;;
      --list | list | -l )
        shift
        setarg "$1"
        __list "$arg"
        [ "$in_shell" -eq 1 ] && return || exit 0
        ;;
      --interactive | sh | shell )
        in_shell=1
        __sh
        ;;
      --shopt | shopt )
        shift
        setarg "$1"
        __shopt "$arg"
        [ "$in_shell" -eq 1 ] && return || exit 0
        ;;
      --verbose | verbose | -V )
        VERBOSE=true
        ;;
      -\? | -h | --help | help )
        cat "$prgroot/help"
        [ "$in_shell" -eq 1 ] && return || exit 0
        ;;
      -v | --version | version )
        cat "$prgroot/version"
        [ "$in_shell" -eq 1 ] && return || exit 0
        ;;
      --update | update )
        __update
        [ "$in_shell" -eq 1 ] && return || exit 0
        ;;
      --reset-cfg | reset-cfg )
        verbose "Resetting BSM to default configuration..."
        if cp -f "$repo/.bsm/.cfg" "$HOME/.bsm/.cfg"; then
          log "BSM has been reset!"
        else
          error "Failed to reset defaults!"
        fi
        [ "$in_shell" -eq 1 ] && return || exit 0
        ;;
      --reset-shcfg | reset-sh )
        verbose "Resetting BSM Shell to default configuration..."
        if cp -f "$repo/.bsm/sh.cfg" "$HOME/.bsm/sh.cfg"; then
          log "BSM Shell has been reset!"
        else
          error "Failed to reset defaults!"
        fi
        [ "$in_shell" -eq 1 ] && return || exit 0
        ;;
      --uninstall | uninstall )
        __uninstall
        exit 0;;
      --dependencies | getdeps )
        __getdeps
        [ "$in_shell" -eq 1 ] && return || exit 0
        ;;
      * )
        # Catch-all
        if echo "$1" | grep -q '^-'; then
          head -1 "$prgroot/help"
          error "\"$1\" is not an argument!"
          [ "$in_shell" -eq 1 ] && return || exit 1
        else
          head -1 "$prgroot/help"
          error "\"$1\" is not a command!"
          [ "$in_shell" -eq 1 ] && return || exit 1
        fi
        ;;
    esac
  shift; done

  # Clear function vars
  unset arg
}

__sh() {
  # Load into alternate screen
  tput smcup
  tput cup 0 0
  # Load BSM Shell options
  hush_motd="$(grep "hush_login" "$prgroot/sh.cfg" | cut -d= -f2)"
  # Welcome message
  [ "$hush_motd" = "false" ] && printf "$(cat "$prgroot/motd.txt")\n\n"
  # Purposeful infinite loop
  while true; do
    printf "\e[1;36mbsm\e[0m> "
    read -r stdin
    if [ "$stdin" = "exit" ] || [ "$stdin" = "quit" ]; then
      break
    elif [ "$stdin" = "pass" ]; then
      continue
    elif echo "$stdin" | grep -q "pass"; then
      bash -c "$(echo "$stdin" | cut -d ' ' -f2-)"
    else
      __args $stdin
    fi
  done

  # Unload from alternate screen
  tput rmcup

  # Clear function vars
  unset hush_motd stdin
}

__shopt() {
  [ -z "$1" ] && { cat "$prgroot/sh.cfg"; exit 0; }
  # Inner write function
  rwrite() {
    verbose "Setting rule from $oldvalue to $newvalue"
    sed -i -e "s/$rule=$oldvalue/$rule=$newvalue/" "$shcfg"
    log "Updated rule $rule from $oldvalue to $newvalue!"
  }
  shcfg="$prgroot/sh.cfg"
  if echo "$1" | grep -q '='; then
    rule="$(echo "$1" | cut -d= -f1)"
    oldvalue="$(grep "$rule" "$shcfg" | cut -d= -f2)"
    newvalue="$(echo "$1" | cut -d= -f2)"
    newvalue="$(echo "$newvalue" | tr '[:upper:]' '[:lower:]')"
    # Check by type
    case "$rule" in
      # Booleans
      hush_login )
        if ! echo "$newvalue" | grep -qE '^(true|false)$'; then
          error "Value must be a boolean (true/false)!"
          return 1
        else
          rwrite
        fi
        ;;
      * )
        error "Not a shell option!"
        return 1
        ;;
    esac
  else
    if [ "$1" = "RESET" ]; then
      __args --reset-shcfg
    else
      rule="$1"
      grep "$rule" "$shcfg"
    fi
  fi

  # Clear the function
  unset rwrite rule oldvalue newvalue shcfg
}

__create() {
  # Check that the scripts folder was made
  [ ! -e "$scriptroot" ] && mkdir "$scriptroot"

  # Check if venv location is supplied
  env=""
  envpath=""

  # Inner type select func
  proctype() {
    name="$1"
    # Node (VEM venv integration disabled)
    if echo "$name" | grep -q ".js"; then
      name="$(echo "$1" | cut -d. -f1)"
      # if [ -n "$env" ]; then
      #   # [[ ! `command -v vem` ]] && echo -e "Must install Virtual Environment Manager to take advantage of Node Virtual Environments!\nRun \`git clone https://github.com/CodeKing710/vem; vem/install;\` to download and install VEM!" && exit
      #   # VEM is optional to be able to manage your envs
      #   # To allow reference, use the path to THE PARENT FOLDER of the node_modules folder that has the desired packages
      #   # If VEM is installed, it will list your envs and check if the name exists then use that path
      #   # Paths detected by the '/' that exists in each path
      #   if [ -n "$(command -v vem)" ]; then
      #     vemenv="$(vem js --path "$envpath" 2>/dev/null)"
      #     [ -z "$vemenv" ] && error "No VEM env with name $envpath!" && exit
      #     envpath="$vemenv"
      #   else
      #     # Assume path, bail upon no path
      #     if ! echo "$envpath" | grep -q '/'; then
      #       error "VEM must be installed to use names!\nIf this is a path, please prepend it with './' or use the absolute path!"
      #       return 1
      #     fi
      #   fi
      #   if [ ! -e "$envpath" ]; then
      #     error "Environment path doesn't exist!"
      #     error "$envpath"
      #     return 1
      #   else
      #     # envshebang="#!$envpath/"
      #     envpath="$envpath/node_modules/"
      #     [ "$TERM_PROGRAM" = 'mintty' ] && envpath=$(cygpath -w "$envpath" | sed -e 's;\\;/;g;' | sed -e 's;/;//;g;' | sed -e 's;//;\\\\\\\\;g;')
      #     mkfile "${envshebang}node\n\n" "${name}" "//" "const venv = '$envpath'\nconst getpkg = (loc) => {\n\t/**\n\t\tWith this being a venv,\n\t\tevery reference to a package that isn't directly in the project\n\t\tmust go through this wrapper\n\t\tto ensure node is looking in the right place.\n\n\t\tIf you are getting a package relative to your project,\n\t\tUSE REQUIRE!! Or use ESM import syntax\n\t**/\n\trequire(\`\${venv}\${loc}\`);\n}\n"
      #   fi
      # else
        mkfile "node" "${name}"
      # fi
    # Python (VEM & venv Integration disabled)
    elif echo "$name" | grep -q ".py"; then
      name="$(echo "$1" | cut -d. -f1)"
      # if [ -n "$env" ]; then
      #   if [ -n "$(command -v vem)" ]; then
      #     vemenv="$(vem py --path "$envpath" 2>/dev/null)"
      #     [ -e "$vemenv/bin" ] && vemenv="$vemenv/bin" || vemenv="$vemenv/Scripts"
      #     [ -z "$vemenv" ] && { error "No VEM env with name $envpath!"; return 1; }
      #     envpath="$vemenv"
      #   else
      #     # Assume path, bail upon no path
      #     if ! echo "$envpath" | grep -q '/'; then
      #       error "VEM must be installed to use names!\nIf this is a path, please prepend it with './' or use the absolute path!"
      #       return 1
      #     fi
      #   fi
      #   if [ ! -e "$envpath" ]; then
      #     error "Environment path doesn't exist!"
      #     error "$envpath"
      #     return 1
      #   else
      #     envshebang="#!$envpath/"
      #     mkfile "${envshebang}python\n\n" "${name}" "#"
      #   fi
      # else
        mkfile "python" "${name}"
      # fi
    # Ruby
    elif echo "$name" | grep -q ".rb"; then
      name="$(echo "$1" | cut -d. -f1)"
      mkfile "ruby" "${name}"
    # LISP
    elif echo "$name" | grep -q ".cl"; then
      name="$(echo "$1" | cut -d. -f1)"
      mkfile "lisp" "${name}"
    # PowerShell
    elif echo "$name" | grep -q ".ps1"; then
      name="$(echo "$1" | cut -d. -f1)"
      mkfile "pwsh" "${name}"
    # Perl
    elif echo "$name" | grep -q ".pl"; then
      name="$(echo "$1" | cut -d. -f1)"
      mkfile "perl" "${name}"
    # Bash
    elif echo "$name" | grep -q ".sh"; then
      name="$(echo "$1" | cut -d. -f1)"
      mkfile "bash" "${name}"
    # Daemon Script
    elif echo "$name" | grep -q ".dmon"; then
      name="$(echo "$1" | cut -d. -f1)"
      mkfile "daemon" "${name}"
    # Swift Script
    elif echo "$name" | grep -q ".swift"; then
      name="$(echo "$1" | cut -d. -f1)"
      mkfile "swift" "${name}"
    # Default script type
    else
      name="$(echo "$1" | cut -d. -f1)"
      mkfile "$defaulttype" "${name}"
    fi
  }
  # Inner file generator func
  mkfile() {
    # $1 is type, $2 is the file name
    # Capture args into variables
    type="$1"
    name="$2"
    scriptloc="${scriptroot}/$name"

    # Capture the correct HDF into a variable
    case "$type" in
      sh | bash )
        . "$prgroot/assets/bash.hdf"
        ;;
      daemon )
        . "$prgroot/assets/daemon.hdf"
        ;;
      swift )
        . "$prgroot/assets/swift.hdf"
        ;;
      py* )
        . "$prgroot/assets/python.hdf"
        ;;
      ruby )
        . "$prgroot/assets/ruby.hdf"
        ;;
      lisp )
        . "$prgroot/assets/lisp.hdf"
        ;;
      powershell | pwsh )
        . "$prgroot/assets/pwsh.hdf"
        ;;
      perl )
        . "$prgroot/assets/perl.hdf"
        ;;
      j*s* | node )
        . "$prgroot/assets/node.hdf"
        ;;
      * )
        error "Not a type!"
        return 1;;
    esac

    # Write the script
    verbose "Writing data to script file..."

    if printf "$script" > "${scriptloc}"; then
      log "Successfully created script '$name'!"
    else
      error "Failed to create script $name at ${scriptloc}!"
    fi
    # Make script executable to the user and the group
    chmod 755 "${scriptloc}"
    unset content scriptloc script type name
  }

  # Loop the item list (VEM venv integration disabled for now)
  for item in $1; do
    verbose "Item: $item"
    # if echo "$item" | grep -qE '^(-e|--env|env)$'; then
    #   env=true
    #   shift
    #   envpath="$item"
    #   shift
    # fi
    name="$item"
    
    verbose "Script name: $(echo "$name" | cut -d. -f1)"

    # Check for conflict of name
    if [ -e "$scriptroot/$(echo "$name" | cut -d. -f1)" ]; then
      printf "\e[1;31m[WARNING]\e[0m The script $(echo "$name" | cut -d. -f1) already exists! Did you want to overwrite? [Y\\\\n] "
      read -r yn
      yn="$(echo "$yn" | tr '[:upper:]' '[:lower:]')"
      if [ "${yn}" = "y" ]; then
        proctype "$name"
      else
        echo "Keeping original script '$(echo "$name" | cut -d. -f1)'"
      fi
    else
      proctype "$name"
    fi
    env=""
    envpath=""
    if [ -z "$__cws" ]; then
      __cws="$(echo "$name" | cut -d. -f1)"
    else
      __cws="$__cws $(echo "$name" | cut -d. -f1)"
    fi
  done
}

__open() {
  openitems="$1"
  verbose "Script List: $openitems"
  log "Opening scripts..."
  
  for item in $openitems; do
    if [ ! -e "$scriptroot/$item" ]; then
      error "Couldn't open script \"$item\"!"
    else
      verbose "Editor: $editor"
      "$editor" "$scriptroot/$item"
    fi
  done
}

__remove() {
  # Loop until an arg is seen
  for item in $1; do
    name="$item"
    if rm "$scriptroot/$name" 2>/dev/null; then
      log "Successfully removed script '$name'"
    else
      error "Unable to remove script '$name'"
    fi
  done
}

__list() {
  list="$(ls -p1 "$scriptroot" 2>/dev/null)"
  if [ ! -e "$scriptroot" ] || [ -z "$list" ]; then
    log "No Scripts Created Yet!"
  else
    if echo "$1" | grep -q -E '^(-1|rows)$'; then
      printf "$list\n"
    else
      printf "$list\n" | column
    fi
  fi
}

# Accepted arg style: oldname newname
__rename() {
  # Loop until arg or cmd is seen
  until echo "$1" | grep -q '^-' || [ -z "$1" ] || echo "$1" | grep -q -E "$cmds"; do
    old="$1"
    new="$2"
    verbose "Old name: $old, New name: $new"
    shift # Ensure next arg in loop is not the new name
    if [ -n "$old" ] && [ -n "$new" ]; then
      mv "$scriptroot/$old" "$scriptroot/$new" 2>/dev/null && log "Successfully renamed '$old' to '$new'!"
      __cws="$new"
    else
      error "Format incorrect! Format: OLD_NAME NEW_NAME"
    fi
  shift; done
}

# Variable arg style: rule rule=value
__config() {
  # Inner log function
  rwrite() {
    verbose "Setting rule from $oldvalue to $newvalue"
    sed -i -e "s|$rule=$oldvalue|$rule=$newvalue|" "$cfg"
    log "Updated rule $rule from $oldvalue to $newvalue!"
  }
  cfg="$prgroot/.cfg"
  until echo "$1" | grep -q '^-' || [ -z "$1" ] || echo "$1" | grep -q -E "$(echo "$cmds" | sed 's/|list//g')"; do
    if echo "$1" | grep -q '='; then
      rule="$(echo "$1" | cut -d= -f1)"
      oldvalue="$(grep "$rule" "$cfg" | cut -d= -f2)"
      newvalue="$(echo "$1" | cut -d= -f2)"
      newvalue="$(echo "$newvalue" | tr '[:upper:]' '[:lower:]')"
      # Check value lists for specific settings
      case "$rule" in
        autoupdate )
          # Bool rules
          if ! echo "${newvalue}" | grep -q -E '^(0|1)$'; then
            error "Value must be a boolean!"
            return 1
          else
            rwrite
          fi
          ;;
        defaulttype )
          # Type rules
          if ! echo "${newvalue}" | grep -q -E "$cfg_type"; then
            error "Value must be Bash, Python, Ruby, LISP, Perl, or Node!"
            return 1
          else
            rwrite
          fi
          ;;
        * )
          # Any other rules
          rwrite
          ;;
      esac
    elif [ "$1" = 'list' ]; then
      echo "Current Settings:"
      cat "$cfg"
      return
    elif [ "$1" = 'RESET' ]; then
      __args --reset-cfg
    fi
    log "Rule: $(grep -E "\b$1\b" "$cfg" || error "No Rule Found!")"
  shift; done
}

__uninstall() {
  printf "Are you sure you want to uninstall BSM? [Y\n] "
  read -r yn
  yn="$(echo "$yn" | tr '[:upper:]' '[:lower:]')"
  if [ "${yn}" = 'y' ]; then
    log "Uninstalling BSM..."
    rm "$HOME/bin/bsm"
    rm -r "$HOME/.bsm"

    printf "Did you want to remove the repo as well? [Y\n] "
    read -r yn
    yn="$(echo "$yn" | tr '[:upper:]' '[:lower:]')"
    if [ "${yn}" = 'y' ]; then
      log "Removing repo..."
      rm -r "$repo"
    else
      log "Keeping the repo"
    fi
    log "Successfully removed BSM!"
  fi
}

# Testing phase
__getdeps() {
  if ! uname | grep -q "Linux"; then
    error "You must manually install the dependencies!"
    return 1
  fi
  
  log "Retrieving BSM dependencies..."
  sudo apt-get install nodejs
  sudo apt-get install python
  sudo apt-get install ruby
  sudo apt-get install sbcl
  log "To install Swift, refer to the Swift website"
}

__update() {
  # verbose "Checking for updates..."
  # if [ -n "$(diff "$repo/.bsm/.lib" "$HOME/.bsm/.lib" 2>/dev/null)" ] || [ -n "$(diff "$repo/.bsm/version" "$HOME/.bsm/version" 2>/dev/null)" ] || [ -n "$(diff "$repo/.bsm/help" "$HOME/.bsm/help" 2>/dev/null)" ]; then 
  #   verbose "Updating BSM..."
  #   . "$repo/install" && log "Successfully installed BSM!"
  # else
    log "BSM up-to-date!"
  # fi
}
