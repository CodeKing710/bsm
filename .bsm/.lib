#!/bin/bash

# BSM's Functions and Variables

# Vars
__cwd=`pwd`
prgroot="$HOME/.bsm"
scriptroot="$HOME/scripts"

# Funcs
__args() {
  # Process args
  while [[ "$1" =~ '-' ]]; do
    case "$1" in
      -c | --create )
        shift
        exit;;
      -o | --open )
        shift
        exit;;
      -r | --remove )
        shift
        exit;;
      -R | --rename )
        shift
        exit;;
      -C | --config )
        shift
        exit;;
      -l | --list )
        __list
        ;;
      -i | --interactive )
        __sh
        exit;;
      -\? | -h | --help )
        cat $prgroot/help
        exit;;
      -v | --version )
        cat $prgroot/version
        exit;;
      * ) # Catch-all
        cat $prgroot/help | head -1
        echo "\"$1\" is not an argument!"
        exit;;
    esac
  shift; done
}

__cmds() {
  while [[ "$1" != "" ]]; do
    local cmd="${1,}"
    shift
    case $cmd in
      create )
        if [[ "$1" == "" ]]; then
          echo "Missing required argument: 'NAME'"
        else
          sub="${1,}"
          shift
          name="$1"
          case $sub in
            ps | ps1 | powershell )
              __create -P $name
              ;;
            py | python )
              __create -p $name
              ;;
            pl | perl )
              __create -e $name
              ;;
            js | node )
              __create -n $name
              ;;
            rb | ruby )
              __create -r $name
              ;;
            cl | lisp )
              __create -l $name
              ;;
            sh | bash )
              __create -b $name
              ;;
            * )
              __create $sub
              ;;
          esac
        fi
        ;;
      open )
        name="$1"
        if [[ "$name" == "" ]]; then
          echo "Missing required argument: 'NAME'"
        else
          __open $name
        fi
        ;;
      # import )
      #   script="$1"
      #   if [[ "$script" == "" ]]; then
      #     echo "Missing required argument: 'SCRIPT'"
      #   else
      #     import_script $@
      #   fi
      #   ;;
      # export )
      #   script="$1"
      #   shift
      #   dest="$1"
      #   if [[ "$script" == "" ]]; then
      #     echo "Missing required argument: 'SCRIPT'"
      #   else
      #     if [[ "$dest" == "" ]]; then
      #       echo "Missing required argument: 'DESTINATION'"
      #     else
      #       export_script $script $dest
      #     fi
      #   fi
      #   ;;
      # link )
      #   script="$1"
      #   shift
      #   name="$1"
      #   if [[ "$script" == "" ]]; then
      #     echo "Missing required argument: 'SCRIPT'"
      #   else
      #     if [[ "$name" == "" ]]; then
      #       echo "Missing required argument: 'NAME'"
      #     else
      #       link_script $script $name
      #     fi
      #   fi
      #   ;;
      rename )
        name="$1"
        shift
        newname="$1"
        if [[ "$name" == "" ]]; then
          echo "Missing required argument: 'NAME'"
        else
          if [[ "$newname" == "" ]]; then
            echo "Missing required argument: 'NEW_NAME'"
          else
            __rename $name $newname
          fi
        fi
        ;;
      remove )
        name="$1"
        if [[ "$name" == "" ]]; then
          echo "Missing required argument: 'SCRIPT'"
        else
          __remove $@
        fi
        ;;
      config )
        rule="${1,}"
        shift
        value="${1,}"
        if [[ "$rule" == "" ]]; then
          echo "Missing required argument: 'RULE'"
        else
          if [[ "$value" == "" || "$value" == "config" ]]; then
            __config $rule
          else
            __config $rule $value
          fi
        fi
        ;;
      sh | shell )
        __sh
        ;;
      list )
        __list
        ;;
      version )
        __args -v
        ;;
      help )
        __args -h
        ;;
      * )
        echo "'$1': Command not found"
        ;;
    esac
  shift; done
}

__sh() {
  while true; do
    read -p "bsm> " stdin
    if [[ "${stdin,}" == "exit" || "${stdin,}" == "quit" ]]; then
      exit
    elif [[ "${stdin,}" == "pass" ]]; then
      continue
    elif [[ "${stdin,}" =~ "pass" ]]; then
      bash -c "$(echo "${stdin,}" | cut -d ' ' -f2-)"
    else
      __cmds "${stdin,}"
    fi
  done
}

__create() {
  # Check that the scripts folder was made
  [ ! -d $scriptroot ] && mkdir $scriptroot
}
# __open() {}
# __remove() {}
# __rename() {}
__list() {
  [ ! -d $scriptroot ] && echo "No scripts created yet!" && return

  echo "Scripts: "
  for script in $scriptroot; do
    echo " - $script"
  done
}
# __config() {}
